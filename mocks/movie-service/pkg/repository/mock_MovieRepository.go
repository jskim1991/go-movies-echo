// Code generated by mockery v2.42.2. DO NOT EDIT.

package repository

import (
	repository "movie-service/pkg/repository"

	mock "github.com/stretchr/testify/mock"
)

// MockMovieRepository is an autogenerated mock type for the MovieRepository type
type MockMovieRepository struct {
	mock.Mock
}

type MockMovieRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMovieRepository) EXPECT() *MockMovieRepository_Expecter {
	return &MockMovieRepository_Expecter{mock: &_m.Mock}
}

// FindMovies provides a mock function with given fields:
func (_m *MockMovieRepository) FindMovies() ([]repository.MovieEntity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindMovies")
	}

	var r0 []repository.MovieEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.MovieEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.MovieEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.MovieEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMovieRepository_FindMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMovies'
type MockMovieRepository_FindMovies_Call struct {
	*mock.Call
}

// FindMovies is a helper method to define mock.On call
func (_e *MockMovieRepository_Expecter) FindMovies() *MockMovieRepository_FindMovies_Call {
	return &MockMovieRepository_FindMovies_Call{Call: _e.mock.On("FindMovies")}
}

func (_c *MockMovieRepository_FindMovies_Call) Run(run func()) *MockMovieRepository_FindMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMovieRepository_FindMovies_Call) Return(_a0 []repository.MovieEntity, _a1 error) *MockMovieRepository_FindMovies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMovieRepository_FindMovies_Call) RunAndReturn(run func() ([]repository.MovieEntity, error)) *MockMovieRepository_FindMovies_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMovieRepository creates a new instance of MockMovieRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMovieRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMovieRepository {
	mock := &MockMovieRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
